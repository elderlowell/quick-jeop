{"remainingRequest":"/Users/jlowell/Sites/quick-jeop/node_modules/babel-loader/lib/index.js!/Users/jlowell/Sites/quick-jeop/node_modules/eslint-loader/index.js??ref--13-0!/Users/jlowell/Sites/quick-jeop/src/store.js","dependencies":[{"path":"/Users/jlowell/Sites/quick-jeop/src/store.js","mtime":1567186949601},{"path":"/Users/jlowell/Sites/quick-jeop/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jlowell/Sites/quick-jeop/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jlowell/Sites/quick-jeop/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport Axios from 'axios';\nVue.use(Vuex);\nexport default new Vuex.Store({\n  state: {\n    clue: {},\n    score: 0,\n    count: 0,\n    refresh: 0\n  },\n  mutations: {\n    setClue: function setClue(state, clue) {\n      state.clue = clue;\n    },\n    updateScore: function updateScore(state, value) {\n      state.score = value;\n    },\n    updateCount: function updateCount(state, value) {\n      state.count = value;\n    },\n    updateRefresh: function updateRefresh(state, value) {\n      state.refresh = value;\n    }\n  },\n  actions: {\n    getClue: function getClue(_ref) {\n      var commit = _ref.commit;\n      Axios.get(\"http://jservice.io/api/random?count=1\").then(function (response) {\n        var temp = response.data[0];\n        temp.answer = formatAnswer(temp.answer);\n        commit(\"setClue\", temp);\n      });\n    }\n  }\n}); //utilities\n\nfunction formatAnswer(a) {\n  var tmp = document.createElement('div');\n  var bs = /\\\\/gi;\n  var qu = /\\\"/gi;\n  tmp.innerHTML = a;\n  tmp = tmp.textContent || tmp.innerText;\n  tmp = tmp.replace(bs, '');\n  tmp = tmp.replace(qu, '');\n  return tmp;\n}",{"version":3,"sources":["/Users/jlowell/Sites/quick-jeop/src/store.js"],"names":["Vue","Vuex","Axios","use","Store","state","clue","score","count","refresh","mutations","setClue","updateScore","value","updateCount","updateRefresh","actions","getClue","commit","get","then","response","temp","data","answer","formatAnswer","a","tmp","document","createElement","bs","qu","innerHTML","textContent","innerText","replace"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEAF,GAAG,CAACG,GAAJ,CAAQF,IAAR;AAEA,eAAe,IAAIA,IAAI,CAACG,KAAT,CAAe;AAC5BC,EAAAA,KAAK,EAAE;AACLC,IAAAA,IAAI,EAAE,EADD;AAELC,IAAAA,KAAK,EAAE,CAFF;AAGLC,IAAAA,KAAK,EAAE,CAHF;AAILC,IAAAA,OAAO,EAAE;AAJJ,GADqB;AAO5BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,OADS,mBACAN,KADA,EACOC,IADP,EACa;AAAED,MAAAA,KAAK,CAACC,IAAN,GAAaA,IAAb;AAAmB,KADlC;AAETM,IAAAA,WAFS,uBAEIP,KAFJ,EAEWQ,KAFX,EAEkB;AAAER,MAAAA,KAAK,CAACE,KAAN,GAAcM,KAAd;AAAqB,KAFzC;AAGTC,IAAAA,WAHS,uBAGIT,KAHJ,EAGWQ,KAHX,EAGkB;AAAER,MAAAA,KAAK,CAACG,KAAN,GAAcK,KAAd;AAAqB,KAHzC;AAITE,IAAAA,aAJS,yBAIMV,KAJN,EAIaQ,KAJb,EAIoB;AAAER,MAAAA,KAAK,CAACI,OAAN,GAAgBI,KAAhB;AAAuB;AAJ7C,GAPiB;AAa5BG,EAAAA,OAAO,EAAE;AACPC,IAAAA,OADO,yBACc;AAAA,UAAVC,MAAU,QAAVA,MAAU;AACnBhB,MAAAA,KAAK,CAACiB,GAAN,0CACGC,IADH,CACQ,UAAAC,QAAQ,EAAI;AAChB,YAAIC,IAAI,GAAGD,QAAQ,CAACE,IAAT,CAAc,CAAd,CAAX;AACAD,QAAAA,IAAI,CAACE,MAAL,GAAcC,YAAY,CAACH,IAAI,CAACE,MAAN,CAA1B;AACAN,QAAAA,MAAM,YAAYI,IAAZ,CAAN;AACD,OALH;AAMD;AARM;AAbmB,CAAf,CAAf,C,CAyBA;;AACA,SAASG,YAAT,CAAuBC,CAAvB,EAA0B;AACxB,MAAIC,GAAG,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAV;AACA,MAAIC,EAAE,GAAG,MAAT;AACA,MAAIC,EAAE,GAAG,MAAT;AACAJ,EAAAA,GAAG,CAACK,SAAJ,GAAgBN,CAAhB;AACAC,EAAAA,GAAG,GAAGA,GAAG,CAACM,WAAJ,IAAmBN,GAAG,CAACO,SAA7B;AACAP,EAAAA,GAAG,GAAGA,GAAG,CAACQ,OAAJ,CAAYL,EAAZ,EAAgB,EAAhB,CAAN;AACAH,EAAAA,GAAG,GAAGA,GAAG,CAACQ,OAAJ,CAAYJ,EAAZ,EAAgB,EAAhB,CAAN;AACA,SAAOJ,GAAP;AACD","sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\nimport Axios from 'axios'\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: {\n    clue: {},\n    score: 0,\n    count: 0,\n    refresh: 0\n  },\n  mutations: {\n    setClue (state, clue) { state.clue = clue },\n    updateScore (state, value) { state.score = value },\n    updateCount (state, value) { state.count = value },\n    updateRefresh (state, value) { state.refresh = value }\n  },\n  actions: {\n    getClue ({ commit }) {\n      Axios.get(`http://jservice.io/api/random?count=1`)\n        .then(response => {\n          let temp = response.data[0]\n          temp.answer = formatAnswer(temp.answer)\n          commit(`setClue`, temp)\n        })\n    }\n  }\n})\n\n//utilities\nfunction formatAnswer (a) {\n  let tmp = document.createElement('div')\n  let bs = /\\\\/gi\n  let qu = /\\\"/gi\n  tmp.innerHTML = a\n  tmp = tmp.textContent || tmp.innerText\n  tmp = tmp.replace(bs, '')\n  tmp = tmp.replace(qu, '')\n  return tmp\n}\n"]}]}